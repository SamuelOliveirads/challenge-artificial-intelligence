from typing import Optional

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

from src.llm.create_rag_db import update_chroma_db
from src.llm.llm_model import StudyJourney

description = """
StudyJourney API

## Overview

This API provides access to the StudyJourney interactive learning assistant,
which helps users identify their knowledge gaps and recommends content
tailored to their preferences.

## Endpoints

### `POST /query`

This endpoint accepts a user's question and returns a response generated by
the StudyJourney assistant.

#### Request

- Method: `POST`
- URL: `/query`
- Body (JSON):
  - `question` (str): The user's question.
  - `stage` (str, optional): The stage of interaction, default is "main".

#### Response

- Status: `200 OK`
- Body (JSON):
  - `message` (str): The response message from the assistant.
  - `rag_content` (str, optional): The retrieved and formatted documents
    if applicable.

#### Example

```bash
curl -X POST "http://localhost:8000/query" -H "Content-Type: application/json"
-d '{"question": "Como posso aprender fundamentos de programação?",
"stage": "main"}'
"""

app = FastAPI(title="StudyJourney API", description=description, version="1.0.0")

study_journey = StudyJourney()


class QueryRequest(BaseModel):
    question: str
    stage: str = "main"


class QueryResponse(BaseModel):
    message: str
    rag_content: Optional[str] = None


@app.post("/query", response_model=QueryResponse)
def query_model(request: QueryRequest):
    try:
        retriever = update_chroma_db()
        message, rag_content = study_journey.get_answer(
            question=request.question, retriever=retriever, stage=request.stage
        )
        return QueryResponse(message=message, rag_content=rag_content)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
